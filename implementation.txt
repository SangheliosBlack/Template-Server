const Joi = require('joi');

// Define una función de middleware de validación dinámica
function validateData(schema) {
    return function(req, res, next) {
        const { error, value } = schema.validate(req.body);
        if (error) {
            return res.status(400).json({ error: error.details[0].message });
        }
        req.validatedData = value;
        next();
    };
}

// Define los esquemas para diferentes modelos
const userSchema = Joi.object({
    username: Joi.string().alphanum().min(3).max(30).required(),
    email: Joi.string().email().required(),
    password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
    repeat_password: Joi.ref('password')
}).with('password', 'repeat_password');

const productSchema = Joi.object({
    name: Joi.string().required(),
    price: Joi.number().min(0).required(),
    description: Joi.string().optional()
});

// Ejemplo de uso del middleware de validación con diferentes esquemas
app.post('/users', validateData(userSchema), (req, res) => {
    // Aquí puedes acceder a los datos validados en req.validatedData
    // Procede con la creación de un usuario
});

app.post('/products', validateData(productSchema), (req, res) => {
    // Aquí puedes acceder a los datos validados en req.validatedData
    // Procede con la creación de un producto
});
